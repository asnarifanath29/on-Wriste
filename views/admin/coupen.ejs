<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coupon Management - E-Shop Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: 250px;
            background: #343a40;
            padding-top: 60px;
            z-index: 1;
        }

        .sidebar .nav-link {
            color: rgba(255, 255, 255, 0.85);
            padding: 10px 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sidebar .nav-link:hover,
        .sidebar .nav-link.active {
            color: #fff;
            background: rgba(255, 255, 255, 0.1);
        }

        /* Navbar Styles */
        .navbar {
            position: fixed;
            top: 0;
            right: 0;
            left: 0;
            z-index: 2;
            background: #343a40;
            padding: 0.5rem 1rem;
        }

        .profile-img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #6c757d;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        /* Main Content */
        .main-content {
            margin-left: 250px;
            padding: 80px 20px 20px;
            background-color: #f4f4f9;
        }

        /* Table Container Styles */
        .table-container {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-top: 20px;
        }

        /* Add Coupon Button */
        .btn-add-coupon {
            background-color: #28a745;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-add-coupon:hover {
            background-color: #218838;
            color: white;
        }

        /* Table Styles */
        .table {
            margin-bottom: 0;
        }

        .table th {
            background-color: #343a40;
            color: #fff;
            border-bottom: none;
            text-transform: uppercase;
            font-size: 14px;
        }

        .table td {
            vertical-align: middle;
        }

        /* Action Buttons */
        .btn-action {
            padding: 6px 14px;
            border-radius: 4px;
            font-size: 14px;
            margin: 0 4px;
        }

        .btn-edit {
            background-color: #17a2b8;
            color: white;
        }

        .btn-activate {
            background-color: #28a745;
            color: white;
        }

        .btn-deactivate {
            background-color: #dc3545;
            color: white;
        }

        .btn-action:hover {
            opacity: 0.9;
            color: white;
        }

        .btn-action:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Status Styles */
        .status-active {
            color: #28a745;
        }

        .status-inactive {
            color: #dc3545;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }
        }
    </style>
</head>

<body>
    <!-- Top Navbar -->
    <nav class="navbar">
        <div class="container-fluid">
            <a class="navbar-brand text-white d-flex align-items-center" href="#">
                <i class="bi bi-shop fs-4 me-2"></i>
                E-Shop Admin
            </a>

            <div class="dropdown ms-auto">
                <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle"
                    data-bs-toggle="dropdown">
                    <div class="profile-img me-2">
                        <i class="bi bi-person-fill"></i>
                    </div>
                    <div class="d-none d-md-block">
                        <strong>John Doe</strong>
                        <small class="d-block text-light">Admin</small>
                    </div>
                </a>
                <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-end">
                    <li><a class="dropdown-item" href="#profile"><i class="bi bi-person"></i> Profile</a></li>
                    <li><a class="dropdown-item" href="#settings"><i class="bi bi-gear"></i> Settings</a></li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li><a class="dropdown-item" href="#" id="logout-btn"><i class="bi bi-box-arrow-right"></i>
                            Logout</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link" href="#dashboard">
                    <i class="bi bi-speedometer2"></i>
                    Dashboard
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/products">
                    <i class="bi bi-box-seam"></i>
                    Product Management
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/userManagement">
                    <i class="bi bi-people"></i>
                    User Management
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/categories">
                    <i class="bi bi-grid"></i>
                    Category Management
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/order">
                    <i class="bi bi-box-seam-fill"></i>
                    Order Management
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" href="/admin/coupons">
                    <i class="bi bi-coin"></i>
                    Coupon Management
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/salesReport">
                    <i class="bi bi-reception-4"></i>
                    Sales Report
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/admin/referal">
                    <i class="bi bi-gift"></i>
                    Referal Management
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Coupon Management</h2>
                <button class="btn btn-add-coupon" onclick="openAddCouponModal()">
                    <i class="bi bi-plus-lg"></i>
                    Add Coupon
                </button>
            </div>

            <div class="table-container">
                <table class="table" id="couponTable">
                    <thead>
                        <tr>
                            <th>S.No</th>
                            <th>Coupon Code</th>
                            <th>Discount</th>
                            <th>Valid From</th>
                            <th>Valid To</th>
                            <th>Min Purchase</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% coupons.forEach((coupon, index)=> { %>
                            <tr>
                                <td>
                                    <%= index + 1 %>
                                </td>
                                <td>
                                    <%= coupon.couponCode %>
                                </td>
                                <td>
                                    <%= coupon.discountPercentage %>%
                                </td>
                                <td>
                                    <%= coupon.validFrom.toLocaleDateString() %>
                                </td>
                                <td>
                                    <%= coupon.validUpto.toLocaleDateString() %>
                                </td>
                                <td>
                                    â‚¹<%= coupon.minPrice %>
                                </td>
                                <td class="<%= coupon.status ? 'status-active' : 'status-inactive' %>">
                                    <%= coupon.status ? 'Active' : 'Inactive' %>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-edit" onclick="editCoupon(this)"
                                        data-id="<%= coupon._id %>" data-code="<%= coupon.couponCode %>"
                                        data-discount="<%= coupon.discountPercentage %>"
                                        data-valid-from="<%= coupon.validFrom.toISOString() %>"
                                        data-valid-to="<%= coupon.validUpto.toISOString() %>"
                                        data-min-purchase="<%= coupon.minPrice %>"
                                        data-max-purchase="<%= coupon.maxDiscount %>"
                                        data-coupon-count="<%= coupon.couponCount %>"
                                        data-status="<%= coupon.status ? 'active' : 'inactive' %>">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>

                                    <button
                                        class="btn btn-action <%= coupon.status ? 'btn-deactivate' : 'btn-activate' %>"
                                        onclick="toggleCouponStatus(this)" data-id="<%= coupon._id %>"
                                        data-status="<%= coupon.status %>">
                                        <i class="bi <%= coupon.status ? 'bi-x-circle' : 'bi-check-circle' %>"></i>
                                        <%= coupon.status ? 'Deactivate' : 'Activate' %>
                                    </button>

                                </td>
                            </tr>
                            <% }) %>
                    </tbody>

                </table>
            </div>
        </div>
    </div>

    <!-- Add/Edit Coupon Modal -->
    <div class="modal fade" id="couponModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="couponModalTitle">Add Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="couponForm">
                        <input type="hidden" id="couponId">
                        <div class="mb-3">
                            <label class="form-label">Coupon Code</label>
                            <input type="text" class="form-control" id="couponCode" required>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Discount Percentage</label>
                                <input type="number" class="form-control" id="discountPercentage" min="1" max="100"
                                    required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Coupen count</label>
                                <input type="number" class="form-control" id="coupencount" min="0" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Minimum Purchase Amount</label>
                                <input type="number" class="form-control" id="minPurchaseAmount" min="0" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Maximum Purchase Amount</label>
                                <input type="number" class="form-control" id="maxPurchaseAmount" min="0" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Valid From</label>
                                <input type="date" class="form-control" id="validFrom" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Valid To</label>
                                <input type="date" class="form-control" id="validTo" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="status" required>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveCouponBtn" onclick="saveCoupon()">Save
                        Coupon</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="editcouponModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="couponModalTitle">Edit Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="couponForm">
                        <input type="hidden" id="couponId">
                        <div class="mb-3">
                            <label class="form-label">Coupon Code</label>
                            <input type="text" class="form-control" id="couponCode" required>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Discount Percentage</label>
                                <input type="number" class="form-control" id="discountPercentage" min="1" max="100"
                                    required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Coupen count</label>
                                <input type="number" class="form-control" id="coupencount" min="0" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Minimum Purchase Amount</label>
                                <input type="number" class="form-control" id="minPurchaseAmount" min="0" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Maximum Purchase Amount</label>
                                <input type="number" class="form-control" id="maxPurchaseAmount" min="0" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Valid From</label>
                                <input type="date" class="form-control" id="validFrom" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Valid To</label>
                                <input type="date" class="form-control" id="validTo" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="status" required>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="editCouponBtn" onclick="editCoupon()">Save
                        Coupon</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Active link handling
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', function () {
                document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Logout handling
        document.getElementById('logout-btn').addEventListener('click', () => {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You will be logged out!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, logout!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/admin/logout', {
                        method: 'POST',
                    }).then(response => {
                        if (response.ok) {
                            window.location.href = '/admin/login';
                        } else {
                            console.error('Logout failed');
                        }
                    });
                }
            });
        });

        // Modal functions
        function openAddCouponModal() {
            document.getElementById('couponModalTitle').textContent = 'Add Coupon';
            document.getElementById('couponForm').reset();
            document.getElementById('couponId').value = '';
            new bootstrap.Modal(document.getElementById('couponModal')).show();
        }

        document.getElementById('saveCouponBtn').addEventListener('click', async function () {
            // Select all form inputs
            const couponCode = document.getElementById('couponCode');
            const discountPercentage = document.getElementById('discountPercentage');
            const coupencount = document.getElementById('coupencount');
            const minPurchaseAmount = document.getElementById('minPurchaseAmount');
            const maxPurchaseAmount = document.getElementById('maxPurchaseAmount');
            const validFrom = document.getElementById('validFrom');
            const validTo = document.getElementById('validTo');
            const status = document.getElementById('status');

            // Reset validation errors
            document.querySelectorAll('.error-message').forEach(error => error.remove());
            document.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));

            let isValid = true;

            // Helper function to show error message
            const showError = (input, message) => {
                const error = document.createElement('div');
                error.className = 'error-message text-danger mt-1';
                error.textContent = message;
                input.classList.add('is-invalid');
                input.parentNode.appendChild(error);
            };

            // Validation rules
            if (couponCode.value.trim() === '') {
                showError(couponCode, 'Coupon code is required.');
                isValid = false;
            }

            if (discountPercentage.value.trim() === '' || discountPercentage.value < 1 || discountPercentage.value > 100) {
                showError(discountPercentage, 'Discount percentage must be between 1 and 100.');
                isValid = false;
            }

            if (coupencount.value.trim() === '' || coupencount.value < 1) {
                showError(coupencount, 'Coupon count must be 1 or more.');
                isValid = false;
            }

            if (minPurchaseAmount.value.trim() === '' || minPurchaseAmount.value < 10) {
                showError(minPurchaseAmount, 'Minimum purchase amount must be 10 or more.');
                isValid = false;
            }

            if (maxPurchaseAmount.value.trim() === '' || maxPurchaseAmount.value < 100) {
                showError(maxPurchaseAmount, 'Maximum purchase amount must be 100 or more.');
                isValid = false;
            }

            if (validFrom.value.trim() === '') {
                showError(validFrom, 'Valid from date is required.');
                isValid = false;
            }

            if (validTo.value.trim() === '') {
                showError(validTo, 'Valid to date is required.');
                isValid = false;
            }

            if (new Date(validTo.value) < new Date(validFrom.value)) {
                showError(validTo, 'Valid to date cannot be earlier than valid from date.');
                isValid = false;
            }

            if (status.value.trim() === '') {
                showError(status, 'Status is required.');
                isValid = false;
            }

            // If valid, send data using fetch
            if (isValid) {
                // Collect form data
                const data = {
                    couponCode: couponCode.value.trim(),
                    discountPercentage: parseFloat(discountPercentage.value),
                    coupencount: parseInt(coupencount.value, 10),
                    minPurchaseAmount: parseFloat(minPurchaseAmount.value),
                    maxPurchaseAmount: parseFloat(maxPurchaseAmount.value),
                    validFrom: validFrom.value.trim(),
                    validTo: validTo.value.trim(),
                    status: status.value.trim()
                };

                try {
                    const response = await fetch('/admin/coupon', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    });

                    if (response.ok) {
                        const result = await response.json();
                        Swal.fire({
                            icon: 'success',
                            title: 'Coupon Saved!',
                            text: 'Coupon saved successfully!',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            Swal.close();
                            window.location.reload();
                        });
                    } else {
                        const errorData = await response.json();
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to Save Coupon',
                            text: `Failed to save coupon: ${errorData.message}`,
                            confirmButtonText: 'Try Again'
                        });
                    }
                } catch (error) {
                    console.error('Error saving coupon:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while saving the coupon. Please try again.',
                        confirmButtonText: 'Close'
                    });
                }

            }
        });








        function editCoupon(button) {
            // Get data attributes from the button
            const couponId = button.getAttribute('data-id');
            const couponCode = button.getAttribute('data-code');
            const discountPercentage = button.getAttribute('data-discount');
            const validFrom = button.getAttribute('data-valid-from');
            const validTo = button.getAttribute('data-valid-to');
            const minPrice = button.getAttribute('data-min-purchase');
            const maxDiscount = button.getAttribute('data-max-purchase');
            const couponCount = button.getAttribute('data-coupon-count');
            const status = button.getAttribute('data-status');

            // Populate the modal fields with the current coupon data
            const editModal = document.getElementById('editcouponModal');
            editModal.querySelector('#couponId').value = couponId;
            editModal.querySelector('#couponCode').value = couponCode;
            editModal.querySelector('#discountPercentage').value = discountPercentage;
            editModal.querySelector('#minPurchaseAmount').value = minPrice;
            editModal.querySelector('#maxPurchaseAmount').value = maxDiscount;
            editModal.querySelector('#coupencount').value = couponCount;
            editModal.querySelector('#validFrom').value = validFrom.split('T')[0]; // Format to 'YYYY-MM-DD'
            editModal.querySelector('#validTo').value = validTo.split('T')[0]; // Format to 'YYYY-MM-DD'

            // Set status dropdown
            editModal.querySelector('#status').value = status;

            // Show the modal
            const modal = new bootstrap.Modal(editModal);
            modal.show();
        }


        document.getElementById('editCouponBtn').addEventListener('click', async function () {
            // Select all form inputs
            const editModal = document.getElementById('editcouponModal');
            const couponId = editModal.querySelector('#couponId').value;
            const couponCode = editModal.querySelector('#couponCode');
            const discountPercentage = editModal.querySelector('#discountPercentage');
            const coupencount = editModal.querySelector('#coupencount');
            const minPurchaseAmount = editModal.querySelector('#minPurchaseAmount');
            const maxPurchaseAmount = editModal.querySelector('#maxPurchaseAmount');
            const validFrom = editModal.querySelector('#validFrom');
            const validTo = editModal.querySelector('#validTo');
            const status = editModal.querySelector('#status');

            // Reset validation errors
            document.querySelectorAll('.error-message').forEach(error => error.remove());
            document.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));

            let isValid = true;

            // Helper function to show error message
            const showError = (input, message) => {
                const error = document.createElement('div');
                error.className = 'error-message text-danger mt-1';
                error.textContent = message;
                input.classList.add('is-invalid');
                input.parentNode.appendChild(error);
            };

            // Validation rules
            if (couponCode.value.trim() === '') {
                showError(couponCode, 'Coupon code is required.');
                isValid = false;
            }

            if (discountPercentage.value.trim() === '' || discountPercentage.value < 1 || discountPercentage.value > 100) {
                showError(discountPercentage, 'Discount percentage must be between 1 and 100.');
                isValid = false;
            }

            if (coupencount.value.trim() === '' || coupencount.value < 1) {
                showError(coupencount, 'Coupon count must be 1 or more.');
                isValid = false;
            }

            if (minPurchaseAmount.value.trim() === '' || minPurchaseAmount.value < 10) {
                showError(minPurchaseAmount, 'Minimum purchase amount must be 10 or more.');
                isValid = false;
            }

            if (maxPurchaseAmount.value.trim() === '' || maxPurchaseAmount.value < 100) {
                showError(maxPurchaseAmount, 'Maximum purchase amount must be 100 or more.');
                isValid = false;
            }

            if (validFrom.value.trim() === '') {
                showError(validFrom, 'Valid from date is required.');
                isValid = false;
            }

            if (validTo.value.trim() === '') {
                showError(validTo, 'Valid to date is required.');
                isValid = false;
            }

            if (new Date(validTo.value) < new Date(validFrom.value)) {
                showError(validTo, 'Valid to date cannot be earlier than valid from date.');
                isValid = false;
            }

            if (status.value.trim() === '') {
                showError(status, 'Status is required.');
                isValid = false;
            }

            // If valid, send data using fetch
            if (isValid) {
                // Collect form data
                const data = {
                    couponCode: couponCode.value.trim(),
                    discountPercentage: parseFloat(discountPercentage.value),
                    coupencount: parseInt(coupencount.value, 10),
                    minPurchaseAmount: parseFloat(minPurchaseAmount.value),
                    maxPurchaseAmount: parseFloat(maxPurchaseAmount.value),
                    validFrom: validFrom.value.trim(),
                    validTo: validTo.value.trim(),
                    status: status.value.trim()
                };

                try {

                    const response = await fetch(`/admin/coupon/${couponId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    });

                    if (response.ok) {
                        const result = await response.json();
                        Swal.fire({
                            icon: 'success',
                            title: 'Coupon Updated',
                            text: 'Coupon data updated successfully!',
                            timer: 1500,
                            showConfirmButton: false
                        }).then(() => {
                            // Close the modal
                            const modal = bootstrap.Modal.getInstance(editModal);
                            modal.hide();
                            // Reload the page or update the table
                            window.location.reload();
                        });
                    } else {
                        const errorData = await response.json();
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to Update Coupon',
                            text: errorData.message || 'An error occurred'
                        });
                    }
                } catch (error) {
                    console.error('Error saving coupon:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while saving the coupon. Please try again.'
                    });
                }
            }
        });






    async function toggleCouponStatus(button) {
    const couponId = button.getAttribute('data-id');
    const currentStatus = button.getAttribute('data-status') === 'true'; // Convert string to boolean
    const newStatus = !currentStatus;

    // Show confirmation dialog
    const confirmation = await Swal.fire({
        title: `Are you sure?`,
        text: `Do you want to ${newStatus ? 'Activate' : 'Deactivate'} this coupon?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
    });

    if (confirmation.isConfirmed) {
        try {
            // Make API call to update the status
            const response = await fetch(`/admin/coupon/status/${couponId}`, {
                method: 'PATCH', // Use PATCH or PUT for partial updates
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });

            if (response.ok) {
                const result = await response.json();

                // Update the button UI
                button.setAttribute('data-status', newStatus);
                button.className = `btn btn-action ${newStatus ? 'btn-deactivate' : 'btn-activate'}`;
                button.innerHTML = `
                    <i class="bi ${newStatus ? 'bi-x-circle' : 'bi-check-circle'}"></i>
                    ${newStatus ? 'Deactivate' : 'Activate'}
                `;

                // Show success SweetAlert
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: `Coupon has been ${newStatus ? 'activated' : 'deactivated'} successfully.`,
                    confirmButtonText: 'OK'
                });
            } else {
                const errorData = await response.json();
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: `Failed to update the coupon status: ${errorData.message}`,
                    confirmButtonText: 'Try Again'
                });
            }
        } catch (error) {
            console.error('Error updating coupon status:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while updating the coupon status. Please try again later.',
                confirmButtonText: 'Close'
            });
        }
    }
}





    </script>
</body>

</html>