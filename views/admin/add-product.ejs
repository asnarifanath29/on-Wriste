<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css">
     <!-- Bootstrap CSS -->
     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
     <!-- Bootstrap Icons -->
     <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
     <!-- Cropper CSS -->
     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css">
    <style>
            /* Sidebar Styles */
            .sidebar {
                position: fixed;
                top: 0;
                left: 0;
                height: 100vh;
                width: 250px;
                background: #343a40;
                padding-top: 60px;
                z-index: 1;
            }
    
            .sidebar .nav-link {
                color: rgba(255, 255, 255, 0.85);
                padding: 10px 20px;
                display: flex;
                align-items: center;
                gap: 10px;
            }
    
            .sidebar .nav-link:hover,
            .sidebar .nav-link.active {
                color: #fff;
                background: rgba(255, 255, 255, 0.1);
            }
    
            /* Navbar Styles */
            .navbar {
                position: fixed;
                top: 0;
                right: 0;
                left: 0;
                z-index: 2;
                background: #343a40;
                padding: 0.5rem 1rem;
            }
    
            .profile-img {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: #6c757d;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
            }
    
            .dropdown-menu {
                margin-top: 0.5rem;
                border: none;
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            }
    
            .dropdown-item i {
                width: 1.25rem;
                margin-right: 0.5rem;
            }
    
            /* Main Content */
            .main-content {
                margin-left: 250px;
                padding: 80px 20px 20px;
            }
    
            /* Form Specific Styles */
            .form-container {
                max-width: 900px;
                margin: 0 auto;
                padding: 20px;
            }
    
            .preview-container {
                max-width: 300px;
                margin: 10px 0;
            }
    
            .image-upload-container {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
                margin-bottom: 20px;
            }
    
            .upload-section {
                display: flex;
                flex-direction: column;
                align-items: center;
                padding: 15px;
                border: 1px solid #ddd;
                border-radius: 8px;
            }
    
            .round-preview {
                max-width: 300px;
                max-height: 400px;
                border: 4px solid #121212;
                object-fit: cover;
                margin: 0 auto;
            }
    
            .cropPreviewSection {
                width: 100%;
                max-width: 400px;
                margin: 15px auto;
                padding: 10px;
                background: #f8f9fa;
                border-radius: 8px;
            }
    
            .required-field::after {
                content: "*";
                color: red;
                margin-left: 4px;
            }
    
            .error-message {
                color: #dc3545;
                font-size: 0.875rem;
                margin-top: 0.25rem;
                display: none;
            }
    
            /* Responsive adjustments */
            @media (max-width: 768px) {
                .sidebar {
                    transform: translateX(-100%);
                    transition: transform 0.3s ease;
                }
    
                .sidebar.show {
                    transform: translateX(0);
                }
    
                .main-content {
                    margin-left: 0;
                }
    
                .image-upload-container {
                    grid-template-columns: 1fr;
                }
            }










































































































        .form-container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }
        .preview-container {
            max-width: 300px;
            margin: 10px 0;
        }
        .cropper-container {
            max-width: 500px;
            margin: 15px 0;
        }
        .preview-image img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .image-section {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .form-section {
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 25px;
        }
        .required-field::after {
            content: "*";
            color: red;
            margin-left: 4px;
        }
         /* Add to existing styles */
         .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }
        .is-invalid {
            border-color: #dc3545;
        }
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type=number] {
            -moz-appearance: textfield;
        }





.image-upload-container {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 20px;
		margin-bottom: 20px;
	}

	.upload-section {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 15px;
		border: 1px solid #ddd;
		border-radius: 8px;
	}

	.preview-container {
		width: 100%;
		margin: 15px 0;
	}

	.round-preview {
		max-width: 300px;
		max-height: 400px;
		border: 4px solid #121212;
		object-fit: cover;
		margin: 0 auto;
	}

	.cropPreviewSection {
		width: 100%;
		max-width: 400px;
		margin: 15px auto;
		padding: 10px;
		background: #f8f9fa;
		border-radius: 8px;
	}

	.cropPreviewSection img {
		max-width: 100%;
		margin-bottom: 10px;
	}

	.crop-button {
		display: block;
		width: 100%;
		padding: 8px;
		background: #007bff;
		color: white;
		border: none;
		border-radius: 4px;
		cursor: pointer;
		margin-top: 10px;
	}

	.crop-button:hover {
		background: #0056b3;
	}


    </style>
</head>



<body>
<!-- Top Navbar -->
<nav class="navbar">
    <div class="container-fluid">
        <!-- Sidebar Toggle Button (Mobile) -->
        <button class="navbar-toggler text-white border-white" type="button" id="sidebarToggle">
            <i class="bi bi-list"></i>
        </button>

        <!-- Brand -->
        <a class="navbar-brand text-white d-flex align-items-center" href="#">
            <i class="bi bi-shop fs-4 me-2"></i>
            E-Shop Admin
        </a>

        <!-- Profile Dropdown -->
        <div class="dropdown ms-auto">
            <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle"
                data-bs-toggle="dropdown">
                <div class="profile-img me-2">
                    <i class="bi bi-person-fill"></i>
                </div>
                <div class="d-none d-md-block">
                    <strong>John Doe</strong>
                    <small class="d-block text-light">Admin</small>
                </div>
            </a>
            <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-end">
                <li><a class="dropdown-item" href="#profile"><i class="bi bi-person"></i>Profile</a></li>
                <li><a class="dropdown-item" href="#settings"><i class="bi bi-gear"></i>Settings</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#" id="logout-btn"><i class="bi bi-box-arrow-right"></i>Logout</a></li>
            </ul>
        </div>
    </div>
</nav>

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <ul class="nav flex-column">
        <li class="nav-item">
            <a class="nav-link" href="#dashboard">
                <i class="bi bi-speedometer2"></i>
                Dashboard
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" href="/admin/products">
                <i class="bi bi-box-seam"></i>
                Products
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/admin/userManagement">
                <i class="bi bi-people"></i>
                Users
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/admin/categories">
                <i class="bi bi-grid"></i>
                Categories
            </a>
        </li>
    </ul>
</div>



<!-- Main Content -->
<div class="main-content">
    <div class="form-container">
        <div class="text-center mb-4">
            <h2>Add New Product</h2>
            <p class="text-muted">Enter product details below</p>
        </div>

        <form id="productForm" action="/admin/add-product" method="POST" enctype="multipart/form-data">
            <!-- Rest of your existing form content remains exactly the same -->
            <div class="form-section">
                <!-- Basic Fields -->
                <div class="mb-3">
                    <label for="productName" class="form-label required-field">Product Name</label>
                    <input type="text" class="form-control" id="productName" name="name" required>
                    <div class="error-message" id="nameError">Please enter a valid product name (minimum 3 characters)</div>
                </div>

                <div class="mb-3">
                    <label for="productDescription" class="form-label required-field">Description</label>
                    <textarea class="form-control" id="productDescription" name="description" rows="3" ></textarea>
                    <div class="error-message" id="descriptionError">Please enter a product description (minimum 10 characters)</div>
                </div>

                <div class="mb-3">
                    <label for="productPrice" class="form-label required-field">Price</label>
                    <input type="number" class="form-control" id="productPrice" name="price" step="0.01" >
                    <div class="error-message" id="priceError">Please enter a valid number</div>
                </div>
                <div class="mb-3">
                    <label for="salesPrice" class="form-label required-field">Sales Price</label>
                    <input type="number" class="form-control" id="salesPrice" name="salesPrice" step="0.01" >
                    <div class="error-message" id="priceError">Please enter a valid number</div>
                </div>
                <div class="mb-3">
                    <label for="brand" class="form-label required-field">Brand</label>
                    <input type="text" class="form-control" id="brand" name="brand" step="0.01" >
                    <div class="error-message" id="nameError">Please enter a valid product name (minimum 3 characters)</div>
                </div>
                <div class="mb-3">
                    <label for="stock" class="form-label required-field">Stock</label>
                    <input type="text" class="form-control" id="stock" name="stock" step="0.01" >
                    <div class="error-message" id="priceError">Please enter a valid number (greater than 0)</div>
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label required-field">Category</label>
                    <select class="form-select" id="category" name="category" required>
                        <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                        <% }) %>
                    </select>
                    <div class="error-message" id="categoryError">Please select a category</div>
                </div>



                <div class="form-group">
                    <label for="productImages">Images</label>
                    <div class="image-upload-container">
                        <% for(let i = 0; i < 4; i++) { %>
                        <div class="upload-section">
                            <input type="file" class="form-control product-image productImagesAdd" id="image<%= i %>" accept="image/*" onchange="previewAndCrop(event, <%= i %>)" name="productImage<%= i + 1 %>" />

                            <div class="preview-container">
                                <img id="roundPreview<%= i %>" alt="Preview" style="display: none;" class="round-preview" />
                            </div>

                            <div class="cropPreviewSection" id="cropPreviewSection<%= i %>" style="display: none">
                                <div style="max-width: 380px;">
                                    <img id="cropPreview<%= i %>"  />
                                </div>
                                <button type="button" class="crop-button" onclick="startCropping(<%= i %>)">
                                    Crop Image <%= i + 1 %>
                                </button>
                            </div>
                        </div>
                        <% } %>
                    </div>
                </div>
                <div class="mt-4">
                    <button type="submit" class="btn btn-success btn-lg w-100" id="add-btn">Add Product</button>
                </div>
            </div>
        </form>
    </div>
</div>









































































































































    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    
    <script>
         // Sidebar Toggle
         document.getElementById('sidebarToggle').addEventListener('click', function() {
            document.getElementById('sidebar').classList.toggle('show');
        });
        
		const cropperInstances = [];
		const croppedImages = [];

		function previewAndCrop(event, index) {
			const file = event.target.files[0];
			if(!file) return;

			// Validate MIME type
			const allowedTypes = ["image/jpeg", "image/png", "image/gif", "image/webp"];
			if(!allowedTypes.includes(file.type)) {
				Swal.fire({
					icon: 'warning', // Yellow warning icon
					title: 'Invalid File!',
					text: 'Please select a valid image file (JPEG, PNG, GIF, or WebP).',
					confirmButtonColor: '#f8b400', // Yellow button for warning
					confirmButtonText: 'OK'
				});
				event.target.value = ""; // Clear the invalid file input
				return;
			}

			const cropPreview = document.getElementById(`cropPreview${index}`);
			const cropPreviewSection = document.getElementById(`cropPreviewSection${index}`);
			const roundPreview = document.getElementById(`roundPreview${index}`);

			// Set the cropping preview
			cropPreview.src = URL.createObjectURL(file);
			cropPreviewSection.style.display = "block";
			roundPreview.style.display = "none"; // Hide the main preview temporarily

			// Initialize or reinitialize the cropper
			if(cropperInstances[index]) {
				cropperInstances[index].destroy();
			}
			cropperInstances[index] = new Cropper(cropPreview, {
				aspectRatio: 3 / 4,
				viewMode: 1,
				autoCropArea: 1,
				scalable: true,
				zoomable: true,
				movable: true,
			});
		}

		function startCropping(index) {
			const cropper = cropperInstances[index];
			if(!cropper) return;

			// Crop the image and convert it to a Blob
			cropper.getCroppedCanvas().toBlob((blob) => {
				croppedImages[index] = blob; // Store the cropped blob in the array

				const cropPreviewSection = document.getElementById(`cropPreviewSection${index}`);
				const roundPreview = document.getElementById(`roundPreview${index}`);

				// Update the round preview with the cropped image
				roundPreview.src = URL.createObjectURL(blob);
				roundPreview.style.display = "block";
				cropPreviewSection.style.display = "none";

				// Update the corresponding file input with the cropped image Blob
				const fileInput = document.getElementById(`image${index}`);
				const dataTransfer = new DataTransfer();
				const croppedFile = new File([blob], fileInput.files[0].name, {
					type: 'image/png'
				});
				dataTransfer.items.add(croppedFile);
				fileInput.files = dataTransfer.files;
			});
		}
	
        // Form validation
        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Check if at least one image is uploaded
            let hasImage = false;
            for (let i = 0; i < 4; i++) {
                if (document.getElementById(`croppedImage${i}`).value) {
                    hasImage = true;
                    break;
                }
            }

            if (!hasImage) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Please upload at least one product image',
                    icon: 'error'
                });
                return;
            }

            // If validation passes, submit the form
            this.submit();
        });

        const form = document.getElementById('productForm');
        const fields = {
            name: {
                element: document.getElementById('productName'),
                errorElement: document.getElementById('nameError'),
                validate: (value) => {
                    return value.trim().length >= 3;
                }
            },
            description: {
                element: document.getElementById('productDescription'),
                errorElement: document.getElementById('descriptionError'),
                validate: (value) => {
                    return value.trim().length >= 10;
                }
            },
            price: {
                element: document.getElementById('productPrice'),
                errorElement: document.getElementById('priceError'),
                validate: (value) => {
                    const price = parseFloat(value);
                    return !isNaN(price) && price > 0;
                }
            },
            salesprice: {
                element: document.getElementById('salesPrice'),
                errorElement: document.getElementById('priceError'),
                validate: (value) => {
                    const price = parseFloat(value);
                    return !isNaN(price) && price > 0;
                }
            },
            category: {
                element: document.getElementById('category'),
                errorElement: document.getElementById('categoryError'),
                validate: (value) => {
                    return value && value.trim() !== '';
                }
            },
            brand: {
                element: document.getElementById('brand'),
                errorElement: document.getElementById('nameError'),
                validate: (value) => {
                    return value.trim().length >= 3;
                }
            },
            stock: {
                element: document.getElementById('stock'),
                errorElement: document.getElementById('priceError'),
                validate: (value) => {
                    const price = parseFloat(value);
                    return !isNaN(price) && price > 0;
                }
            },
           
        };

        // Real-time validation
        Object.keys(fields).forEach(fieldName => {
            const field = fields[fieldName];
            field.element.addEventListener('input', () => {
                validateField(fieldName);
            });

            field.element.addEventListener('blur', () => {
                validateField(fieldName);
            });
        });

        function validateField(fieldName) {
            const field = fields[fieldName];
            const value = field.element.value;
            const isValid = field.validate(value);

            if (!isValid) {
                field.element.classList.add('is-invalid');
                field.errorElement.style.display = 'block';
            } else {
                field.element.classList.remove('is-invalid');
                field.errorElement.style.display = 'none';
            }

            return isValid;
        }

        function validateAllFields() {
            let isValid = true;
            Object.keys(fields).forEach(fieldName => {
                if (!validateField(fieldName)) {
                    isValid = false;
                }
            });
            return isValid;
        }


        // Form validation
document.getElementById('productForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Check if at least one image is uploaded using the new system
    let hasImage = false;
    const imageInputs = document.querySelectorAll('.productImagesAdd');
    for (let input of imageInputs) {
        if (input.files && input.files.length > 0) {
            hasImage = true;
            break;
        }
    }

    // Validate all fields
    const isFormValid = validateAllFields();

    if (!hasImage) {
        Swal.fire({
            title: 'Error!',
            text: 'Please upload at least one product image',
            icon: 'error'
        });
        return;
    }

    if (!isFormValid) {
        Swal.fire({
            title: 'Error!',
            text: 'Please check all required fields',
            icon: 'error'
        });
        return;
    }

    // Format price to 2 decimal places
    const priceField = document.getElementById('productPrice');
    const salesPriceField = document.getElementById('salesPrice');
    if (priceField.value) {
        priceField.value = parseFloat(priceField.value).toFixed(2);
    }
    if (salesPriceField.value) {
        salesPriceField.value = parseFloat(salesPriceField.value).toFixed(2);
    }

    // If all validation passes, submit the form
    this.submit();
});

// Price input formatting for both price fields
const priceInputs = [document.getElementById('productPrice'), document.getElementById('salesPrice')];
priceInputs.forEach(input => {
    if (input) {
        input.addEventListener('input', function(e) {
            // Remove any non-numeric characters except decimal point
            let value = this.value.replace(/[^\d.]|\.(?=.*\.)/g, '');
            
            // Ensure only two decimal places
            const parts = value.split('.');
            if (parts[1] && parts[1].length > 2) {
                parts[1] = parts[1].substring(0, 2);
                value = parts.join('.');
            }
            
            this.value = value;
        });
    }
});
    </script>
</body>
</html>
